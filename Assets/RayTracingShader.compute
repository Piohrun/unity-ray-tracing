#pragma kernel CSMain
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4 _DirectionalLight;
int _Bounces;

struct Sphere {
	float3 position;
	float radius;
	float3 color;
	float3 reflectivity;
	float3 orbitCenter;
	float orbitRadius;
	float orbitAngle;
	//float posX;
	//float posY;
	//float posZ;
};

StructuredBuffer<Sphere> _Spheres;
//Sphere[] spheres;
//_Spheres.GetData(spheres);

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

float2 _PixelOffset;

struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};
Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
	float3 color;
	float3 ref;
};

RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.color = float3(0.0f, 0.0f, 0.0f);
	hit.ref = float3(0.0f, 0.0f, 0.0f);
	return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
	// Calculate distance along the ray where the ground plane is intersected
	float t = -ray.origin.y / ray.direction.y;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0.0f, 1.0f, 0.0f);
		//bestHit.color = float3( 135.0f / 255.0f, 66.0f / 255.0f, 245.0f / 255.0f);
		bestHit.color = float3(235.0f / 255.0f, 236.0f / 255.0f, 245.0f / 255.0f);
		bestHit.ref = float3(0.4f, 0.4f, 0.4f);
	}
}

void IntersectSphere(Ray ray, inout RayHit bestHit, float4 sphere, float3 color, float3 ref)
{
	// Calculate distance along the ray where the sphere is intersected
	float3 d = ray.origin - sphere.xyz;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.w * sphere.w;
	if (p2sqr < 0)
		return;
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.xyz);
		bestHit.color = color;
		bestHit.ref = ref;
	}
}

RayHit Trace(Ray ray)
{
	RayHit bestHit = CreateRayHit();
	IntersectGroundPlane(ray, bestHit);
	// Add a floating unit sphere
	//foreach(Sphere s in _Spheres)
	int c = _Spheres.Length;

	for (int i = 0; i < c; i++)
	{
		// r? , y, z ,x
		IntersectSphere(ray, bestHit, float4(_Spheres[i].position, _Spheres[i].radius ), _Spheres[i].color, _Spheres[i].reflectivity);
	}

	//ComputeBuffer.Dispose();

	//IntersectSphere(ray, bestHit, float4(0, 3.0f, 0, 1.0f), float3(66.0f/255.0f, 135.0f /255.0f, 245.0f /255.0f));
	return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{	
	
	if (hit.distance < 1.#INF)
	{
		// Reflect the ray and multiply energy with specular reflection
		ray.origin = hit.position + hit.normal * 0.001f;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= hit.color;
		//ray.energy = float3(1.0f, 1.0f, 1.0f);
		
		// Shadow test ray
		bool shadow = false;
		Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
		//Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f,     (hit.position + hit.normal * 0.001f) - (_DirectionalLight.xyz)  );
		RayHit shadowHit = Trace(shadowRay);
		if (shadowHit.distance != 1.#INF)
		{
			return float3(0.0f, 0.0f, 0.0f);
		}

		return hit.color * saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.ref;
		//return ray.energy * _DirectionalLight.w * albedo;;
	}
	else
	{
		// Erase the ray's energy - the sky doesn't reflect anything
		ray.energy = 0.0f;
		// Sample the skybox and write it
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		return float3(0, 0, 0);
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
	}
}



Ray CreateCameraRay(float2 uv)
{
	// Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	// Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);
	return CreateRay(origin, direction);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{


	// Get the dimensions of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);
	// Transform pixel to [-1,1] range
	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
	// Get a ray for the UVs
	Ray ray = CreateCameraRay(uv);
	// Write some colors
	// Trace and shade
	float3 result = float3(0, 0, 0);
	for (int i = 0; i < _Bounces; i++)
	{
		RayHit hit = Trace(ray);
		result += ray.energy * Shade(ray, hit);
		if (!any(ray.energy))
			break;
	}
	
	Result[id.xy] = float4(result, 1);

}